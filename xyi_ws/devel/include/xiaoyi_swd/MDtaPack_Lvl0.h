// Generated by gencpp from file xiaoyi_swd/MDtaPack_Lvl0.msg
// DO NOT EDIT!


#ifndef XIAOYI_SWD_MESSAGE_MDTAPACK_LVL0_H
#define XIAOYI_SWD_MESSAGE_MDTAPACK_LVL0_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Pose.h>

namespace xiaoyi_swd
{
template <class ContainerAllocator>
struct MDtaPack_Lvl0_
{
  typedef MDtaPack_Lvl0_<ContainerAllocator> Type;

  MDtaPack_Lvl0_()
    : bdta_use(0)
    , bdta0(false)
    , bdta1(false)
    , bdta2(false)
    , idta_use(0)
    , idta0(0)
    , idta1(0)
    , idta2(0)
    , fdta_use(0)
    , fdta0(0.0)
    , fdta1(0.0)
    , fdta2(0.0)
    , carray_use(0)
    , carray0()
    , carray1()
    , carray2()
    , iarray_use(0)
    , iarray0()
    , iarray1()
    , farray_use(0)
    , farray0()
    , farray1()
    , farray2()
    , farray3()
    , farray4()
    , farray5()
    , point32dta()
    , posedta()  {
    }
  MDtaPack_Lvl0_(const ContainerAllocator& _alloc)
    : bdta_use(0)
    , bdta0(false)
    , bdta1(false)
    , bdta2(false)
    , idta_use(0)
    , idta0(0)
    , idta1(0)
    , idta2(0)
    , fdta_use(0)
    , fdta0(0.0)
    , fdta1(0.0)
    , fdta2(0.0)
    , carray_use(0)
    , carray0(_alloc)
    , carray1(_alloc)
    , carray2(_alloc)
    , iarray_use(0)
    , iarray0(_alloc)
    , iarray1(_alloc)
    , farray_use(0)
    , farray0(_alloc)
    , farray1(_alloc)
    , farray2(_alloc)
    , farray3(_alloc)
    , farray4(_alloc)
    , farray5(_alloc)
    , point32dta(_alloc)
    , posedta(_alloc)  {
    }



   typedef uint8_t _bdta_use_type;
  _bdta_use_type bdta_use;

   typedef uint8_t _bdta0_type;
  _bdta0_type bdta0;

   typedef uint8_t _bdta1_type;
  _bdta1_type bdta1;

   typedef uint8_t _bdta2_type;
  _bdta2_type bdta2;

   typedef uint8_t _idta_use_type;
  _idta_use_type idta_use;

   typedef uint32_t _idta0_type;
  _idta0_type idta0;

   typedef uint32_t _idta1_type;
  _idta1_type idta1;

   typedef uint32_t _idta2_type;
  _idta2_type idta2;

   typedef uint8_t _fdta_use_type;
  _fdta_use_type fdta_use;

   typedef float _fdta0_type;
  _fdta0_type fdta0;

   typedef float _fdta1_type;
  _fdta1_type fdta1;

   typedef float _fdta2_type;
  _fdta2_type fdta2;

   typedef uint8_t _carray_use_type;
  _carray_use_type carray_use;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _carray0_type;
  _carray0_type carray0;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _carray1_type;
  _carray1_type carray1;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _carray2_type;
  _carray2_type carray2;

   typedef uint8_t _iarray_use_type;
  _iarray_use_type iarray_use;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _iarray0_type;
  _iarray0_type iarray0;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _iarray1_type;
  _iarray1_type iarray1;

   typedef uint8_t _farray_use_type;
  _farray_use_type farray_use;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _farray0_type;
  _farray0_type farray0;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _farray1_type;
  _farray1_type farray1;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _farray2_type;
  _farray2_type farray2;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _farray3_type;
  _farray3_type farray3;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _farray4_type;
  _farray4_type farray4;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _farray5_type;
  _farray5_type farray5;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _point32dta_type;
  _point32dta_type point32dta;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _posedta_type;
  _posedta_type posedta;




  typedef boost::shared_ptr< ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> const> ConstPtr;

}; // struct MDtaPack_Lvl0_

typedef ::xiaoyi_swd::MDtaPack_Lvl0_<std::allocator<void> > MDtaPack_Lvl0;

typedef boost::shared_ptr< ::xiaoyi_swd::MDtaPack_Lvl0 > MDtaPack_Lvl0Ptr;
typedef boost::shared_ptr< ::xiaoyi_swd::MDtaPack_Lvl0 const> MDtaPack_Lvl0ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace xiaoyi_swd

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'xiaoyi_swd': ['/home/cyb7369299/My_Workspace/xyi_ws/src/xiaoyi_swd/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d624bbd853ed36260975cb1970e85ab";
  }

  static const char* value(const ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d624bbd853ed362ULL;
  static const uint64_t static_value2 = 0x60975cb1970e85abULL;
};

template<class ContainerAllocator>
struct DataType< ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xiaoyi_swd/MDtaPack_Lvl0";
  }

  static const char* value(const ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 bdta_use\n\
bool bdta0\n\
bool bdta1\n\
bool bdta2\n\
\n\
uint8 idta_use\n\
uint32 idta0\n\
uint32 idta1\n\
uint32 idta2\n\
\n\
uint8 fdta_use\n\
float32 fdta0\n\
float32 fdta1\n\
float32 fdta2\n\
\n\
uint8 carray_use\n\
uint8[] carray0\n\
uint8[] carray1\n\
uint8[] carray2\n\
\n\
uint8 iarray_use\n\
uint32[] iarray0\n\
uint32[] iarray1\n\
\n\
uint8 farray_use\n\
float32[] farray0\n\
float32[] farray1\n\
float32[] farray2\n\
float32[] farray3\n\
float32[] farray4\n\
float32[] farray5\n\
\n\
geometry_msgs/Point32 point32dta\n\
geometry_msgs/Pose posedta\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bdta_use);
      stream.next(m.bdta0);
      stream.next(m.bdta1);
      stream.next(m.bdta2);
      stream.next(m.idta_use);
      stream.next(m.idta0);
      stream.next(m.idta1);
      stream.next(m.idta2);
      stream.next(m.fdta_use);
      stream.next(m.fdta0);
      stream.next(m.fdta1);
      stream.next(m.fdta2);
      stream.next(m.carray_use);
      stream.next(m.carray0);
      stream.next(m.carray1);
      stream.next(m.carray2);
      stream.next(m.iarray_use);
      stream.next(m.iarray0);
      stream.next(m.iarray1);
      stream.next(m.farray_use);
      stream.next(m.farray0);
      stream.next(m.farray1);
      stream.next(m.farray2);
      stream.next(m.farray3);
      stream.next(m.farray4);
      stream.next(m.farray5);
      stream.next(m.point32dta);
      stream.next(m.posedta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct MDtaPack_Lvl0_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xiaoyi_swd::MDtaPack_Lvl0_<ContainerAllocator>& v)
  {
    s << indent << "bdta_use: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bdta_use);
    s << indent << "bdta0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bdta0);
    s << indent << "bdta1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bdta1);
    s << indent << "bdta2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bdta2);
    s << indent << "idta_use: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.idta_use);
    s << indent << "idta0: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.idta0);
    s << indent << "idta1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.idta1);
    s << indent << "idta2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.idta2);
    s << indent << "fdta_use: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fdta_use);
    s << indent << "fdta0: ";
    Printer<float>::stream(s, indent + "  ", v.fdta0);
    s << indent << "fdta1: ";
    Printer<float>::stream(s, indent + "  ", v.fdta1);
    s << indent << "fdta2: ";
    Printer<float>::stream(s, indent + "  ", v.fdta2);
    s << indent << "carray_use: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.carray_use);
    s << indent << "carray0[]" << std::endl;
    for (size_t i = 0; i < v.carray0.size(); ++i)
    {
      s << indent << "  carray0[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.carray0[i]);
    }
    s << indent << "carray1[]" << std::endl;
    for (size_t i = 0; i < v.carray1.size(); ++i)
    {
      s << indent << "  carray1[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.carray1[i]);
    }
    s << indent << "carray2[]" << std::endl;
    for (size_t i = 0; i < v.carray2.size(); ++i)
    {
      s << indent << "  carray2[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.carray2[i]);
    }
    s << indent << "iarray_use: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.iarray_use);
    s << indent << "iarray0[]" << std::endl;
    for (size_t i = 0; i < v.iarray0.size(); ++i)
    {
      s << indent << "  iarray0[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.iarray0[i]);
    }
    s << indent << "iarray1[]" << std::endl;
    for (size_t i = 0; i < v.iarray1.size(); ++i)
    {
      s << indent << "  iarray1[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.iarray1[i]);
    }
    s << indent << "farray_use: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.farray_use);
    s << indent << "farray0[]" << std::endl;
    for (size_t i = 0; i < v.farray0.size(); ++i)
    {
      s << indent << "  farray0[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.farray0[i]);
    }
    s << indent << "farray1[]" << std::endl;
    for (size_t i = 0; i < v.farray1.size(); ++i)
    {
      s << indent << "  farray1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.farray1[i]);
    }
    s << indent << "farray2[]" << std::endl;
    for (size_t i = 0; i < v.farray2.size(); ++i)
    {
      s << indent << "  farray2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.farray2[i]);
    }
    s << indent << "farray3[]" << std::endl;
    for (size_t i = 0; i < v.farray3.size(); ++i)
    {
      s << indent << "  farray3[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.farray3[i]);
    }
    s << indent << "farray4[]" << std::endl;
    for (size_t i = 0; i < v.farray4.size(); ++i)
    {
      s << indent << "  farray4[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.farray4[i]);
    }
    s << indent << "farray5[]" << std::endl;
    for (size_t i = 0; i < v.farray5.size(); ++i)
    {
      s << indent << "  farray5[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.farray5[i]);
    }
    s << indent << "point32dta: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.point32dta);
    s << indent << "posedta: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.posedta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XIAOYI_SWD_MESSAGE_MDTAPACK_LVL0_H
