# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xiaoyi_swd/MDtaPack_Lvl0.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class MDtaPack_Lvl0(genpy.Message):
  _md5sum = "0d624bbd853ed36260975cb1970e85ab"
  _type = "xiaoyi_swd/MDtaPack_Lvl0"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 bdta_use
bool bdta0
bool bdta1
bool bdta2

uint8 idta_use
uint32 idta0
uint32 idta1
uint32 idta2

uint8 fdta_use
float32 fdta0
float32 fdta1
float32 fdta2

uint8 carray_use
uint8[] carray0
uint8[] carray1
uint8[] carray2

uint8 iarray_use
uint32[] iarray0
uint32[] iarray1

uint8 farray_use
float32[] farray0
float32[] farray1
float32[] farray2
float32[] farray3
float32[] farray4
float32[] farray5

geometry_msgs/Point32 point32dta
geometry_msgs/Pose posedta

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['bdta_use','bdta0','bdta1','bdta2','idta_use','idta0','idta1','idta2','fdta_use','fdta0','fdta1','fdta2','carray_use','carray0','carray1','carray2','iarray_use','iarray0','iarray1','farray_use','farray0','farray1','farray2','farray3','farray4','farray5','point32dta','posedta']
  _slot_types = ['uint8','bool','bool','bool','uint8','uint32','uint32','uint32','uint8','float32','float32','float32','uint8','uint8[]','uint8[]','uint8[]','uint8','uint32[]','uint32[]','uint8','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','geometry_msgs/Point32','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bdta_use,bdta0,bdta1,bdta2,idta_use,idta0,idta1,idta2,fdta_use,fdta0,fdta1,fdta2,carray_use,carray0,carray1,carray2,iarray_use,iarray0,iarray1,farray_use,farray0,farray1,farray2,farray3,farray4,farray5,point32dta,posedta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MDtaPack_Lvl0, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bdta_use is None:
        self.bdta_use = 0
      if self.bdta0 is None:
        self.bdta0 = False
      if self.bdta1 is None:
        self.bdta1 = False
      if self.bdta2 is None:
        self.bdta2 = False
      if self.idta_use is None:
        self.idta_use = 0
      if self.idta0 is None:
        self.idta0 = 0
      if self.idta1 is None:
        self.idta1 = 0
      if self.idta2 is None:
        self.idta2 = 0
      if self.fdta_use is None:
        self.fdta_use = 0
      if self.fdta0 is None:
        self.fdta0 = 0.
      if self.fdta1 is None:
        self.fdta1 = 0.
      if self.fdta2 is None:
        self.fdta2 = 0.
      if self.carray_use is None:
        self.carray_use = 0
      if self.carray0 is None:
        self.carray0 = ''
      if self.carray1 is None:
        self.carray1 = ''
      if self.carray2 is None:
        self.carray2 = ''
      if self.iarray_use is None:
        self.iarray_use = 0
      if self.iarray0 is None:
        self.iarray0 = []
      if self.iarray1 is None:
        self.iarray1 = []
      if self.farray_use is None:
        self.farray_use = 0
      if self.farray0 is None:
        self.farray0 = []
      if self.farray1 is None:
        self.farray1 = []
      if self.farray2 is None:
        self.farray2 = []
      if self.farray3 is None:
        self.farray3 = []
      if self.farray4 is None:
        self.farray4 = []
      if self.farray5 is None:
        self.farray5 = []
      if self.point32dta is None:
        self.point32dta = geometry_msgs.msg.Point32()
      if self.posedta is None:
        self.posedta = geometry_msgs.msg.Pose()
    else:
      self.bdta_use = 0
      self.bdta0 = False
      self.bdta1 = False
      self.bdta2 = False
      self.idta_use = 0
      self.idta0 = 0
      self.idta1 = 0
      self.idta2 = 0
      self.fdta_use = 0
      self.fdta0 = 0.
      self.fdta1 = 0.
      self.fdta2 = 0.
      self.carray_use = 0
      self.carray0 = ''
      self.carray1 = ''
      self.carray2 = ''
      self.iarray_use = 0
      self.iarray0 = []
      self.iarray1 = []
      self.farray_use = 0
      self.farray0 = []
      self.farray1 = []
      self.farray2 = []
      self.farray3 = []
      self.farray4 = []
      self.farray5 = []
      self.point32dta = geometry_msgs.msg.Point32()
      self.posedta = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5B3IB3fB.pack(_x.bdta_use, _x.bdta0, _x.bdta1, _x.bdta2, _x.idta_use, _x.idta0, _x.idta1, _x.idta2, _x.fdta_use, _x.fdta0, _x.fdta1, _x.fdta2, _x.carray_use))
      _x = self.carray0
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.carray1
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.carray2
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.iarray_use))
      length = len(self.iarray0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.iarray0))
      length = len(self.iarray1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.iarray1))
      buff.write(_struct_B.pack(self.farray_use))
      length = len(self.farray0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.farray0))
      length = len(self.farray1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.farray1))
      length = len(self.farray2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.farray2))
      length = len(self.farray3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.farray3))
      length = len(self.farray4)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.farray4))
      length = len(self.farray5)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.farray5))
      _x = self
      buff.write(_struct_3f7d.pack(_x.point32dta.x, _x.point32dta.y, _x.point32dta.z, _x.posedta.position.x, _x.posedta.position.y, _x.posedta.position.z, _x.posedta.orientation.x, _x.posedta.orientation.y, _x.posedta.orientation.z, _x.posedta.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.point32dta is None:
        self.point32dta = geometry_msgs.msg.Point32()
      if self.posedta is None:
        self.posedta = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 31
      (_x.bdta_use, _x.bdta0, _x.bdta1, _x.bdta2, _x.idta_use, _x.idta0, _x.idta1, _x.idta2, _x.fdta_use, _x.fdta0, _x.fdta1, _x.fdta2, _x.carray_use,) = _struct_5B3IB3fB.unpack(str[start:end])
      self.bdta0 = bool(self.bdta0)
      self.bdta1 = bool(self.bdta1)
      self.bdta2 = bool(self.bdta2)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.carray0 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.carray1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.carray2 = str[start:end]
      start = end
      end += 1
      (self.iarray_use,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.iarray0 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.iarray1 = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.farray_use,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.farray0 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.farray1 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.farray2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.farray3 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.farray4 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.farray5 = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 68
      (_x.point32dta.x, _x.point32dta.y, _x.point32dta.z, _x.posedta.position.x, _x.posedta.position.y, _x.posedta.position.z, _x.posedta.orientation.x, _x.posedta.orientation.y, _x.posedta.orientation.z, _x.posedta.orientation.w,) = _struct_3f7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5B3IB3fB.pack(_x.bdta_use, _x.bdta0, _x.bdta1, _x.bdta2, _x.idta_use, _x.idta0, _x.idta1, _x.idta2, _x.fdta_use, _x.fdta0, _x.fdta1, _x.fdta2, _x.carray_use))
      _x = self.carray0
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.carray1
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.carray2
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.iarray_use))
      length = len(self.iarray0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.iarray0.tostring())
      length = len(self.iarray1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.iarray1.tostring())
      buff.write(_struct_B.pack(self.farray_use))
      length = len(self.farray0)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.farray0.tostring())
      length = len(self.farray1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.farray1.tostring())
      length = len(self.farray2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.farray2.tostring())
      length = len(self.farray3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.farray3.tostring())
      length = len(self.farray4)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.farray4.tostring())
      length = len(self.farray5)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.farray5.tostring())
      _x = self
      buff.write(_struct_3f7d.pack(_x.point32dta.x, _x.point32dta.y, _x.point32dta.z, _x.posedta.position.x, _x.posedta.position.y, _x.posedta.position.z, _x.posedta.orientation.x, _x.posedta.orientation.y, _x.posedta.orientation.z, _x.posedta.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.point32dta is None:
        self.point32dta = geometry_msgs.msg.Point32()
      if self.posedta is None:
        self.posedta = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 31
      (_x.bdta_use, _x.bdta0, _x.bdta1, _x.bdta2, _x.idta_use, _x.idta0, _x.idta1, _x.idta2, _x.fdta_use, _x.fdta0, _x.fdta1, _x.fdta2, _x.carray_use,) = _struct_5B3IB3fB.unpack(str[start:end])
      self.bdta0 = bool(self.bdta0)
      self.bdta1 = bool(self.bdta1)
      self.bdta2 = bool(self.bdta2)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.carray0 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.carray1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.carray2 = str[start:end]
      start = end
      end += 1
      (self.iarray_use,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.iarray0 = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.iarray1 = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 1
      (self.farray_use,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.farray0 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.farray1 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.farray2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.farray3 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.farray4 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.farray5 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 68
      (_x.point32dta.x, _x.point32dta.y, _x.point32dta.z, _x.posedta.position.x, _x.posedta.position.y, _x.posedta.position.z, _x.posedta.orientation.x, _x.posedta.orientation.y, _x.posedta.orientation.z, _x.posedta.orientation.w,) = _struct_3f7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_5B3IB3fB = struct.Struct("<5B3IB3fB")
_struct_3f7d = struct.Struct("<3f7d")
